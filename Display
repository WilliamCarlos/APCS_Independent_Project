/**
 * 
 * @Authors
 * Ophir Sneh & Matthew Seligson
 * 
 */

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;

public class Display extends JComponent {
	public double k = 9*Math.pow(10, 9);
	public int DISPLAY_WIDTH;   
	public int DISPLAY_HEIGHT;
	private boolean paintloop = true;
	int TIME_BETWEEN_REPLOTS = 1;
	Ball[] ballarray;
	int xdif = 0;
	int ydif = 0;
	JFrame f;
	double volume;
	double lastvolume;
	double[] originalX = new double[100];
	double[] originalY = new double[100];
	private StartButton start;


	public Display(int width, int height, JFrame frame) {
		DISPLAY_WIDTH = width;
		DISPLAY_HEIGHT = height; 
		f = frame; 
		init();
	}

	public void init() {
		setSize(DISPLAY_WIDTH, DISPLAY_HEIGHT);
		paintloop = true;
		start = new StartButton();
		start.setBounds(20, 20, 100, 50);
		add(start);
		start.setVisible(true);
		ballarray = new Ball[3];
		Ball ball;
		for (int i = 0; i<1; i++) {
			for (int j = 0; j<2; j++) {
				ball = new Ball(20, DISPLAY_WIDTH/2-135+i*30, DISPLAY_HEIGHT/6+65+j*30, 1, -1, 20, Math.random()/100);
				ballarray[i*4+j] = ball;
				originalX[i*4+j] = ballarray[i*4+j].x;
				originalY[i*4+j] = ballarray[i*4+j].y;
			}

		}
		ball = new Ball(10, DISPLAY_WIDTH/2-135+0*30, DISPLAY_HEIGHT/6+65+5*30, 1, -1, 20, Math.random()/1);
		ballarray[2] = ball;
		originalX[2] = ballarray[2].x;
		originalY[2] = ballarray[2].y;


		repaint();

	}

	public void paintComponent(Graphics g) {
		g.setColor(Color.BLACK);
		g.drawRect(DISPLAY_WIDTH/6, DISPLAY_HEIGHT/6, DISPLAY_WIDTH*2/3, DISPLAY_HEIGHT*5/6 - DISPLAY_HEIGHT/10);

		lastvolume=DISPLAY_WIDTH*DISPLAY_HEIGHT;
		xdif = f.getWidth()-DISPLAY_WIDTH;
		DISPLAY_WIDTH=f.getWidth();
		volume = DISPLAY_WIDTH*DISPLAY_HEIGHT;
		g.setColor(Color.BLUE);

		start.repaint();

		((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,  RenderingHints.VALUE_ANTIALIAS_ON);
		if (paintloop) {
			try {
				Thread.sleep(TIME_BETWEEN_REPLOTS);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			onloop(g);

			repaint();
		}

		for(int i = 0; i<ballarray.length; i++) {
			ballarray[i].draw(g);
		}

		repaint();
	}

	public void togglePaintLoop() {
		paintloop = !paintloop;
	}

	public void onloop(Graphics g) {

		for(int k = 0; k <ballarray.length; k++){


			Ball temp = ballarray[k];
			temp.force = new Force();



			for(int j = 0; j <ballarray.length; j++){
				if(k!=j){
					Ball temp2 = ballarray[j];

					temp.force.add(CalculateForce(ballarray[j], ballarray[k]));
					System.out.println(ballarray[0].force);
				}
			}
		}

		for (int i = 0; i<ballarray.length; i++) {
			ballarray[i].update(g, DISPLAY_WIDTH, DISPLAY_HEIGHT, TIME_BETWEEN_REPLOTS);
			if (ballarray[i].hitWall == true) {
				if (xdif<0) {
					ballarray[i].x+=xdif;
				}
				if (ydif<0) {
					ballarray[i].y+=ydif;
				}
			}
			ballarray[i].draw(g);
		}

		if (xdif!= 0 || ydif!=0) {
			for (int i = 0; i<ballarray.length; i++) {
				ballarray[i].speed*=Math.sqrt(lastvolume/volume);
			}
		}

	}

	public Force CalculateForce(Ball ballA, Ball ballB) {
		// TODO Auto-generated method stub
		double magnitude = Math.abs(ballA.charge) * Math.abs(ballB.charge);
		boolean attract = attract(ballA, ballB);
		magnitude *= k;
		magnitude /= distanceSquared(ballA, ballB);
		calculateTheta(ballA, ballB);

		double theta = calculateTheta(ballA, ballB);
		if(!attract){
			theta+=Math.PI;
		}
		Force retval = new Force(magnitude, theta);
		return retval;

	}

	private double calculateTheta(Ball b1, Ball b2) {
		// TODO Auto-generated method stub
		double theta = 1000;
		double xComp = b1.x - b2.x;
		double yComp = b1.y - b2.y;
		if(xComp > 0) {
			theta = Math.atan(yComp/xComp);
			return theta;
		}else if(xComp < 0){
			theta =  Math.atan(yComp/xComp) + Math.PI;
			return theta;
		}
		else if(xComp == 0) {
			if(yComp == 0) {
				return 00;
			}else if (yComp > 0){
				return Math.PI/2;
			}else if(yComp < 0) {
				return 3*Math.PI/2;
			}
		}
		return theta;
	}

	public boolean attract(Ball ballA, Ball ballB) {
		return ballA.charge * ballB.charge < 0;
	}

	public double distanceSquared(Ball b1, Ball b2) {
		double xDif = b1.x - b2.x;
		double yDif = b1.y - b2.y;
		double distanceSquared = xDif * xDif + yDif * yDif;
		return distanceSquared;
	}

	public void setPaintLoop(boolean value) {
		paintloop = value;
	}

	private class StartButton extends JButton implements ActionListener {
		StartButton() {
			super("Stop");
			addActionListener(this);
		}

		public void actionPerformed(ActionEvent arg0) {
			if(this.getText().equals("Stop")) {
				togglePaintLoop();
				this.setText("Start");
			} else {
				togglePaintLoop();
				this.setText("Stop");
			}
		}
	}
}
