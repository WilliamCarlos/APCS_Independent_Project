/**
 * 
 * @Authors
 * Ophir Sneh, Dean Leitersdorf, William Lee
 * 
 */

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Line2D;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class Display extends JComponent {
	public double k = 9*Math.pow(10, 9);
	double permitivity_of_free_space = 8.85418782 * Math.pow(10, -12);
	public int DISPLAY_WIDTH;   
	public int DISPLAY_HEIGHT;
	private boolean paintloop = true;
	int TIME_BETWEEN_REPLOTS = 50;
	Ball[] ballarray;
	int xdif = 0;
	int ydif = 0;
	JFrame f;
	double volume;
	double lastvolume;
	double[] originalX = new double[100];
	double[] originalY = new double[100];
	private StartButton start;
	JLabel[] chargeDisplay;
	Force[][] electricField;
	double[][] voltageValue;
	
	int timeCounter = -TIME_BETWEEN_REPLOTS;
	


	public Display(int width, int height, JFrame frame) {
		DISPLAY_WIDTH = width;
		DISPLAY_HEIGHT = height; 
		electricField = new Force[DISPLAY_WIDTH][DISPLAY_HEIGHT];
		voltageValue = new double[DISPLAY_WIDTH][DISPLAY_HEIGHT];
	
		f = frame; 
		init();
	}

	public void init() {
		setSize(DISPLAY_WIDTH, DISPLAY_HEIGHT);
		paintloop = true;
		start = new StartButton();
		start.setBounds(20, 20, 100, 50);
		add(start);
		start.setVisible(true);
		ballarray = new Ball[2];
		chargeDisplay = new JLabel[ballarray.length];
		
	Ball ball;
		for (int i = 0; i<1; i++) {
			for (int j = 0; j<1; j++) {
				
				ball = new Ball(15, DISPLAY_WIDTH/2-135+i*30, DISPLAY_HEIGHT/6+65+j*30, 0, 0, 0, Math.random()*100/1000000);
				ballarray[i*3+j] = ball;
				originalX[i*3+j] = ballarray[i*3+j].x;
				originalY[i*3+j] = ballarray[i*3+j].y;
				chargeDisplay[i*3+j] = new JLabel();
				JLabel temp = chargeDisplay[i*3+j];
				
				String str = "";
				str+=(int)(ball.charge*1000000);
				str+="µC";
				temp.setText(str);
				temp.setBounds((int)ball.x, (int)ball.y, 50, 25);
				add(temp);
			    temp.setVisible(true);
				
				
			}

		}
		
		ball = new Ball(10, DISPLAY_WIDTH/2-135+0*30, DISPLAY_HEIGHT/6+65+5*30, 1, -1, 20, -Math.random()*300/1000000);
		ballarray[1] = ball;
		originalX[1] = ballarray[1].x;
		originalY[1] = ballarray[1].y;
		chargeDisplay[1] = new JLabel();
		JLabel temp = chargeDisplay[1];
		String str = "";
		str+=(int)(ball.charge*1000000);
		str+="µC";
		temp.setText(str);
		temp.setBounds((int)ball.x, (int)ball.y, 50, 25);
		add(temp);
	    temp.setVisible(true);


		repaint();

	}

	public void paintComponent(Graphics g) {
		g.setColor(Color.BLACK);
		g.drawRect(DISPLAY_WIDTH/6, DISPLAY_HEIGHT/6, DISPLAY_WIDTH*2/3, DISPLAY_HEIGHT*5/6 - DISPLAY_HEIGHT/10);

		lastvolume=DISPLAY_WIDTH*DISPLAY_HEIGHT;
		xdif = f.getWidth()-DISPLAY_WIDTH;
		DISPLAY_WIDTH=f.getWidth();
		volume = DISPLAY_WIDTH*DISPLAY_HEIGHT;
		g.setColor(Color.BLUE);

		start.repaint();

		((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,  RenderingHints.VALUE_ANTIALIAS_ON);
		if (paintloop) {
			try {
				Thread.sleep(TIME_BETWEEN_REPLOTS);
				timeCounter+=TIME_BETWEEN_REPLOTS;
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			onloop(g);

			repaint();
		}

		for(int i = 0; i<ballarray.length; i++) {
			ballarray[i].draw(g);
		}

		repaint();
	}

	public void togglePaintLoop() {
		paintloop = !paintloop;
	}

	public void onloop(Graphics g) {

		for(int k = 0; k <ballarray.length; k++){


			Ball temp = ballarray[k];
			temp.force = new Force();



			for(int j = 0; j <ballarray.length; j++){
				if(k!=j){
					Ball temp2 = ballarray[j];

					temp.force.add(CalculateForce(ballarray[j], ballarray[k]));
					System.out.println("Calced: " + j + " on: " + k);
				}
			}
		}

		for (int i = 0; i<ballarray.length; i++) {
			ballarray[i].update(g, DISPLAY_WIDTH, DISPLAY_HEIGHT, TIME_BETWEEN_REPLOTS);
			if (ballarray[i].hitWall == true) {
				if (xdif<0) {
					ballarray[i].x+=xdif;
				}
				if (ydif<0) {
					ballarray[i].y+=ydif;
				}
			}
			ballarray[i].draw(g);
			updateJLabel(chargeDisplay[i], i);
		
		}
		if (xdif!= 0 || ydif!=0) {
			for (int i = 0; i<ballarray.length; i++) {
				ballarray[i].speed*=Math.sqrt(lastvolume/volume);
			}
		}
		
		System.out.println(DISPLAY_WIDTH);
		System.out.println(timeCounter);
		if(timeCounter%2000==0){
		calculateElectricFieldOnScreen();
		calculateVolateOnScreen();
		printVoltages();
		
		}
		drawVoltageGrid(g);
		
	}
	
	private void printVoltages() {
		for(int x = 0; x <DISPLAY_WIDTH; x++){
			for (int y = 0; y < DISPLAY_HEIGHT; y++){
				double v = voltageValue[x][y];
				if (v!=0){
					System.out.println("X: " + x + " Y: " + y + " V: " + v);
				}
			}
		}
		
	}

	private void drawVoltageGrid(Graphics g) {
		double max = getMax(voltageValue);
		double min = getMin(voltageValue);
		System.out.println("JJJJJJJJJJJJJJJJJJJJJ " + max);
		for(int x = DISPLAY_WIDTH/6; x < DISPLAY_WIDTH*5/6; x+=10){
			for (int y = DISPLAY_WIDTH/6; y <DISPLAY_HEIGHT*5/6; y+=10){
				double value = voltageValue[x][y];
				g.setColor(getBackground());
				if(value>0){
					g.setColor(Color.red);
				}
				if(value>max/50){
					g.setColor(Color.white);
				}if(value>max/25){
					g.setColor(Color.lightGray);
				}
				if(value>max/15){
					g.setColor(Color.pink);
				}
				if(value>max/10){
					g.setColor(Color.yellow);
				}if(value>max/5){
					g.setColor(Color.green);
				}
				if(value>max/2){
					g.setColor(Color.CYAN);
				}
				
				if(value<0){
					g.setColor(Color.red);
				}
				if(value<min/50){
					g.setColor(Color.pink);
				}if(value<min/25){
					g.setColor(Color.orange);
				}
				if(value<min/15){
					g.setColor(Color.magenta);
				}
				if(value<min/10){
					g.setColor(Color.gray);
				}if(value<min/5){
					g.setColor(Color.DARK_GRAY);
				}
				if(value<min/2){
					g.setColor(Color.black);
				}	
				g.fillRect(x, y, 10, 10);
			}
			}
		
	}

	private double getMin(double[][] a) {
		double min = 999999;
		for(int i = 0; i < DISPLAY_WIDTH; i++){
			for(int j = 0; j <DISPLAY_HEIGHT; j++){
				if (a[i][j]<min){
					System.out.println("MIN: " +  a[i][j]);
					
					min = a[i][j];
				}
			}
		}
		return min;
	}

	private double getMax(double[][] a) {
		double max = -999999;
		for(int i = 0; i < DISPLAY_WIDTH; i++){
			for(int j = 0; j <DISPLAY_HEIGHT; j++){
				if (a[i][j]>max){
					System.out.println("MAX: " +  a[i][j]);
					
					max = a[i][j];
				}
			}
		}
		return max;
	}

	private void calculateVolateOnScreen() {
		for(int x = DISPLAY_WIDTH/6; x < DISPLAY_WIDTH*5/6; x+=10){
			for (int y = DISPLAY_WIDTH/6; y <DISPLAY_HEIGHT*5/6; y+=10){
				voltageValue[x][y] = 0;
				for(int i = 0; i <ballarray.length; i++){
					Ball ball = ballarray[i];
					voltageValue[x][y] += calculateVoltage(ball, new Point(x, y));
				}
			}
			}
		
	}

	private double calculateVoltage(Ball ball, Point point) {
		return ball.charge/distance(ball.x, ball.y, point.x, point.y)*(1/(4*Math.PI*permitivity_of_free_space));
		
	}

	private double distance(double x, double y, int x2, int y2) {
		return Math.pow(Math.pow(x - x2, 2) + Math.pow(y - y2, 2), 0.5);
		
	}

	private void calculateElectricFieldOnScreen() {
		for(int x = DISPLAY_WIDTH/6; x < DISPLAY_WIDTH*5/6; x+=10){
			for (int y = DISPLAY_WIDTH/6; y <DISPLAY_HEIGHT*5/6; y+=10){
				electricField[x][y] = new Force();
				for(int i = 0; i <ballarray.length; i++){
					Ball ball = ballarray[i];
					
					electricField[x][y].add(
							calculateElectricField(ball,  new Point (x, y)));
				}
			}
		}
		
	}

	private Force calculateElectricField(Ball ball, Point point) {
		double magnitude = ball.charge*k;
		magnitude/=distanceSquared(ball, new Ball(0, point.x, point.y, 0, 0, 0, 0));
		// Only thing that matters for distanceSquared is the x and y coords, 
		//thus all the rest can be 0s.
		double theta = calculateTheta(ball, new Ball(0, point.x, point.y, 0, 0, 0, 0));
		return new Force(magnitude, theta);
	}

	private void updateJLabel(JLabel jLabel, int i) {
	
		String str = "";
		str+=(int)(ballarray[i].charge*1000000);
		str+="µC";
		jLabel.setText(str);
		jLabel.setBounds((int)ballarray[i].x, (int)ballarray[i].y, 50, 25);
		add(jLabel);
	    jLabel.setVisible(true);
		
	}

	public Force CalculateForce(Ball ballA, Ball ballB) {
		// TODO Auto-generated method stub
		double magnitude = Math.abs(ballA.charge) * Math.abs(ballB.charge);
		boolean attract = attract(ballA, ballB);
		magnitude *= k;
		magnitude /= distanceSquared(ballA, ballB);
		calculateTheta(ballA, ballB);

		double theta = calculateTheta(ballA, ballB);
		if(!attract){
			theta+=Math.PI;
		}
		Force retval = new Force(magnitude, theta);
		return retval;

	}

	private double calculateTheta(Ball b1, Ball b2) {
		// TODO Auto-generated method stub
		double theta = 1000;
		double xComp = b1.x - b2.x;
		double yComp = b1.y - b2.y;
		if(xComp > 0) {
			theta = Math.atan(yComp/xComp);
			return theta;
		}else if(xComp < 0){
			theta =  Math.atan(yComp/xComp) + Math.PI;
			return theta;
		}
		else if(xComp == 0) {
			if(yComp == 0) {
				return 00;
			}else if (yComp > 0){
				return Math.PI/2;
			}else if(yComp < 0) {
				return 3*Math.PI/2;
			}
		}
		return theta;
	}

	public boolean attract(Ball ballA, Ball ballB) {
		return ballA.charge * ballB.charge < 0;
	}

	public double distanceSquared(Ball b1, Ball b2) {
		double xDif = b1.x - b2.x;
		double yDif = b1.y - b2.y;
		double distanceSquared = xDif * xDif + yDif * yDif;
		return distanceSquared;
	}

	public void setPaintLoop(boolean value) {
		paintloop = value;
	}

	private class StartButton extends JButton implements ActionListener {
		StartButton() {
			super("Pause");
			addActionListener(this);
		}

		public void actionPerformed(ActionEvent arg0) {
			if(this.getText().equals("Start")) {
				togglePaintLoop();
				this.setText("Pause");
			} else {
				togglePaintLoop();
				this.setText("Start");
			}
		}
	}
}
